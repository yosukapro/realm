functions:
  "fetch binaries":
    - command: shell.exec
      params:
        working_dir: realm-core
        shell: bash
        script: |-
          set -o errexit
          set -o verbose

          if [[ "$OS" = "Windows_NT" ]]; then
            curl -LsSo cmake_binaries.zip ${cmake_url}
            unzip -q cmake_binaries.zip
          else
            mkdir cmake_binaries && cd cmake_binaries
            curl -LsS ${cmake_url} | tar -xz --strip-components=1
            cd ..
          fi

          if [[ -n "${clang_url|}" ]]; then
            mkdir clang_binaries && cd clang_binaries
            curl -LsS ${clang_url} | tar -xJ --strip-components=1
            cd ..
          fi

  "fetch source":
    - command: git.get_project
      params: {directory: realm-core}
    - command: shell.exec
      params:
        working_dir: realm-core
        script: |-
          set -o errexit
          git submodule update --init --recursive

  "compile":
    - command: shell.exec
      params:
        working_dir: realm-core
        shell: bash
        script: |-
          set -o errexit
          set -o verbose

          if [ -d cmake_vars ]; then
              rm cmake_vars/*.txt
          fi
          export CMAKE_VARS_DIR=$(./evergreen/abspath.sh cmake_vars)
          source evergreen/cmake_vars_utils.sh
          export CMAKE=$(./evergreen/abspath.sh ${cmake_bindir}/cmake)

          if [ -n "${xcode_developer_dir}" ]; then
              export DEVELOPER_DIR="${xcode_developer_dir}"
          fi

          if [ -n "${c_compiler}" ]; then
              [ -n "${cxx_compiler}" ] || (echo "C compiler defined as  but C++ compiler is undefined"; exit 1)
              set_cmake_var compiler_vars CMAKE_C_COMPILER PATH $(./evergreen/abspath.sh ${c_compiler})
              set_cmake_var compiler_vars CMAKE_CXX_COMPILER PATH $(./evergreen/abspath.sh ${cxx_compiler})
          fi

          if [ -n "${build_zlib|}" ]; then
              CC="${c_compiler|}" GENERATOR="${cmake_generator|}" \
                  ./evergreen/build_zlib.sh \
                      -p zlib_prefix \
                      -b v1.2.11 \
                      -e "${extra_flags}" \
                      -j ${max_jobs|$(grep -c proc /proc/cpuinfo)}
          fi

          if [ -n "${run_tests_against_baas|}" ]; then
              set_cmake_var baas_vars REALM_ENABLE_AUTH_TESTS BOOL On
              set_cmake_var baas_vars REALM_MONGODB_ENDPOINT STRING "http://localhost:9090"
          fi

          if [ -n "${enable_asan|}" ]; then
              set_cmake_var realm_vars REALM_ASAN BOOL On
          fi

          if [ -n "${enable_tsan|}" ]; then
              set_cmake_var realm_vars REALM_TSAN BOOL On
          fi

          if [ -z "${disable_sync|}" ]; then
              set_cmake_var realm_vars REALM_ENABLE_SYNC BOOL On
          fi

          if [ -n "${use_system_openssl|}" ]; then
              set_cmake_var realm_vars REALM_USE_SYSTEM_OPENSSL BOOL On
          fi

          if [ -n "${long_running_test_duration|}" ]; then
              set_cmake_var realm_vars REALM_TEST_DURATION STRING "${long_running_test_duration}"
          fi

          set_cmake_var realm_vars REALM_BUILD_COMMANDLINE_TOOLS BOOL On
          set_cmake_var realm_vars REALM_ENABLE_ENCRYPTION BOOL On

          if [[ -n "${fetch_missing_dependencies|}" ]]; then
              set_cmake_var realm_vars REALM_FETCH_MISSING_DEPENDENCIES BOOL On
          fi

          if [[ -n "${cmake_toolchain_file|}" ]]; then
              set_cmake_var realm_vars CMAKE_TOOLCHAIN_FILE PATH "${cmake_toolchain_file}"
          fi

          if [ -n "${enable_logging|}" ]; then
              set_cmake_var realm_vars REALM_TEST_SYNC_LOGGING BOOL On
          fi

          GENERATOR="${cmake_generator}"
          if [ -z "${cmake_generator|}" ]; then
              GENERATOR="Ninja Multi-Config"
              set_cmake_var generator_vars CMAKE_MAKE_PROGRAM PATH "${ninja|ninja}"
          fi

          echo "Running cmake with these vars:"
          cat cmake_vars/*.txt | tee cmake_vars.txt
          echo

          $CMAKE \
            -B build \
            -C cmake_vars.txt ${extra_flags} \
            -G "$GENERATOR"

          if [[ -n "${target_to_build|}" ]]; then
              target="--target ${target_to_build|}"
          fi

          ${cmake_bindir}/cmake \
              --build build \
              --config ${cmake_build_type|Debug} \
              -j ${max_jobs|$(grep -c proc /proc/cpuinfo)} \
              $target

  "run benchmark":
    - command: shell.exec
      params:
        working_dir: realm-core
        shell: bash
        script: |-
          set -o errexit

          if [[ -z "${benchmark_name}" ]]; then
              echo "No benchmark specified."
              exit 1
          fi

          BENCHMARK=$(./evergreen/abspath.sh ./build/test/benchmark-${benchmark_name}/${cmake_build_type|Debug}/realm-benchmark-${benchmark_name})
          echo "Going to run benchmark $BENCHMARK"

          [[ -d benchmark_results ]] && rm -rf benchmark_results
          mkdir benchmark_results
          cd benchmark_results

          $BENCHMARK
    - command: perf.send
      params:
        file: './realm-core/benchmark_results/results.latest.json'

  "run tests":
    - command: shell.exec
      params:
        working_dir: realm-core
        shell: bash
        script: |-
          set -o errexit
          set -o verbose
          CTEST=$(pwd)/${cmake_bindir}/ctest

          if [[ -n "${test_filter}" ]]; then
              TEST_FLAGS="-R ${test_filter}"
          fi
          TEST_FLAGS="$TEST_FLAGS ${test_flags|}"

          export UNITTEST_EVERGREEN_TEST_RESULTS="$(./evergreen/abspath.sh ${task_name}_results.json)"
          if [[ -n "${report_test_progress|}" ]]; then
              export UNITTEST_PROGRESS=${report_test_progress|}
          fi

          if [[ -n "${run_with_encryption}" ]]; then
              export UNITTEST_ENCRYPT_ALL=1
          fi

          cd build
          $CTEST -C ${cmake_build_type|Debug} -V $TEST_FLAGS

  "upload test results":
  - command: attach.results
    params:
      file_location: realm-core/${task_name}_results.json
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      local_file: 'realm-core/baas-work-dir/baas_server.log'
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/baas_server.log'
      bucket: mciuploads
      permissions: public-read
      content_type: text/text
      display_name: baas server logs
      optional: true

  "run hang analyzer":
  - command: shell.exec
    params:
      shell: bash
      script: |-
        set -o errexit
        set -o verbose

        if [[ ! -d realm-core ]]; then
          echo "No source directory exists. Not running hang analyzer"
        fi

        TOP_DIR=$(pwd)/realm-core
        mkdir realm-core/hang_analyzer_workdir; cd realm-core/hang_analyzer_workdir
        ${python3|python3} -m venv venv

        # venv creates its Scripts/activate file with CLRF endings, which
        # cygwin bash does not like. dos2unix it
        # (See https://bugs.python.org/issue32451)
        if [ "Windows_NT" = "$OS" ]; then
          dos2unix "venv/Scripts/activate"
        fi

        export VIRTUAL_ENV_DISABLE_PROMPT=yes

        if [ "Windows_NT" = "$OS" ]; then
          # Need to quote the path on Windows to preserve the separator.
          . "venv/Scripts/activate" 2> /tmp/activate_error.log
        else
          . venv/bin/activate 2> /tmp/activate_error.log
        fi
        if [ $? -ne 0 ]; then
          echo "Failed to activate virtualenv: $(cat /tmp/activate_error.log)"
          exit 1
        fi
        python=python

        echo "python set to $(which $python)"

        echo "Upgrading pip to 21.0.1"

        # ref: https://github.com/grpc/grpc/issues/25082#issuecomment-778392661
        if [ "$(uname -m)" = "arm64" ] && [ "$(uname)" == "Darwin" ]; then
          export GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=1
          export GRPC_PYTHON_BUILD_SYSTEM_ZLIB=1
        fi

        python -m pip --disable-pip-version-check install "pip==21.0.1" "wheel==0.37.0" || exit 1

        REQUIREMENTS_PATH=$TOP_DIR/evergreen/hang_analyzer/requirements.txt
        if [ "Windows_NT" = "$OS" ]; then
          REQUIREMENTS_PATH=$(cygpath -w $REQUIREMENTS_PATH)
        fi

        python -m pip install -r $REQUIREMENTS_PATH || exit 1

        echo "Going to run hang analyzer"

        HANG_ANALYZER_PATH=$TOP_DIR/evergreen/hang_analyzer
        if [ "Windows_NT" = "$OS" ]; then
          HANG_ANALYZER_PATH=$(cygpath -w $HANG_ANALYZER_PATH)
        fi

        python $HANG_ANALYZER_PATH

timeout:
  - func: "run hang analyzer"

tasks:
- name: compile
  tags: [ "for_pull_requests" ]
  commands:
  - func: "compile"

- name: package
  commands:
  - func: "compile"
  - command: shell.exec
    params:
      working_dir: realm-core
      script: |-
        set -o errexit
        cpack=$(pwd)/${cmake_bindir}/cpack

        cd build
        $cpack -C ${cmake_build_type|Debug} -G TGZ -D "CPACK_PACKAGE_FILE_NAME=realm-core-artifacts" ${package_flags|}
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/realm-core-artifacts-devel.tar.gz'
      bucket: mciuploads
      permissions: public-read
      local_file: 'realm-core/build/realm-core-artifacts-devel.tar.gz'
      content_type: '${content_type|application/x-gzip}'
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/realm-core-artifacts-runtime.tar.gz'
      bucket: mciuploads
      permissions: public-read
      local_file: 'realm-core/build/realm-core-artifacts-runtime.tar.gz'
      content_type: '${content_type|application/x-gzip}'

- name: swift-build-and-test
  commands:
  - func: "fetch source"
  - func: "fetch binaries"
  - command: shell.exec
    params:
      working_dir: realm-core
      shell: /bin/bash
      script: |-
        #!/bin/bash
        set -o errexit
        set -o pipefail
        set -o verbose

        if [ -n "${xcode_developer_dir}" ]; then
            export DEVELOPER_DIR="${xcode_developer_dir}"
        fi

        xcrun swift build
        xcrun swift run ObjectStoreTests

- name: bloaty
  commands:
  - func: "fetch source"
  - func: "fetch binaries"
  - func: "compile"
    vars:
      target_to_build: RealmFFI
  - command: shell.exec
    params:
      working_dir: realm-core
      shell: /bin/bash
      script: |-
        #!/bin/bash
        set -o errexit
        set -o pipefail

        mkdir bloaty-binaries && cd bloaty-binaries
        curl --silent -L ${bloaty_url} | tar -xz --strip-components=1
        BLOATY=$(pwd)/bin/bloaty
        cd ..

        FILES_TO_ANALYZE="./build/src/realm/object-store/c_api/librealm-ffi.so"

        mkdir bloaty-results
        for input_path in $FILES_TO_ANALYZE; do
            input_file=$(basename $input_path)
            $BLOATY -d shortsymbols $input_path -n 0 --csv > "bloaty-results/$input_file-shortsymbols.csv"
            $BLOATY -d sections $input_path -n 0 --csv > "bloaty-results/$input_file-sections.csv"
            $BLOATY -d shortsymbols $input_path -n 0 > "bloaty-results/$input_file-shortsymbols.txt"
            $BLOATY -d sections $input_path -n 0 > "bloaty-results/$input_file-sections.txt"
            $BLOATY -d compileunits $input_path -n 0 > "bloaty-results/$input_file-compileunits.txt"
            $BLOATY -d compileunits $input_path -n 0 --csv > "bloaty-results/$input_file-compileunits.csv"

            echo "Bloaty sections output for $input_file"
            head -n 100 "bloaty-results/$input_file-sections.txt"
            echo
            echo "Bloaty compile units output for $input_file"
            head -n 100 "bloaty-results/$input_file-compileunits.txt"
            echo
            echo "Bloaty short symbols output for $input_file"
            head -n 100 "bloaty-results/$input_file-shortsymbols.txt"

            ${python3|} ./evergreen/bloaty_to_json.py \
                --short-symbols-input="bloaty-results/$input_file-shortsymbols.csv" \
                --sections-input="bloaty-results/$input_file-sections.csv" \
                --compileunits-input="bloaty-results/$input_file-compileunits.csv" \
                --analyzed-file=$input_file \
                --output "bloaty-results/$input_file-results.json" \
                --project=${project} \
                --execution=${execution} \
                --is-patch=${is_patch} \
                --build-variant=${build_variant} \
                --branch=${branch_name} \
                --revision=${revision} \
                --task-id=${task_id} \
                --task-name=${task_name} \
                --revision-order-id=${revision_order_id} \
                --version-id=${version_id}

            # TODO(JBR) This is pointing to a test application for now. When we have charts configured we can create
            # a real realm app to house them and this URL will change.
            curl \
                -H "Content-Type: application/json" \
                -d "@bloaty-results/$input_file-results.json" \
                https://us-east-1.aws.webhooks.mongodb-realm.com/api/client/v2.0/app/application-0-htnkr/service/http1/incoming_webhook/upload_bloaty_results?secret=${bloaty_secret}
        done

  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      local_files_include_filter:
        - realm-core/bloaty-results/*.csv
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/bloaty-results-'
      bucket: mciuploads
      permissions: public-read
      content_type: text/csv
      display_name: bloaty-results
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      local_files_include_filter:
        - realm-core/bloaty-results/*.txt
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/bloaty-results-'
      bucket: mciuploads
      permissions: public-read
      content_type: text/text
      display_name: bloaty-results
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      local_files_include_filter:
        - realm-core/bloaty-results/*.json
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/bloaty-results-'
      bucket: mciuploads
      permissions: public-read
      content_type: application/json
      display_name: bloaty-results

- name: long-running-core-tests
  commands:
  - func: "run tests"
    # The long-running tests can take a really long time on Windows, so we give the test up to 4
    # hours to complete
    timeout_secs: 14400
    vars:
      test_filter: StorageTests
      report_test_progress: On

- name: core-tests
  tags: [ "test_suite", "for_pull_requests" ]
  exec_timeout_secs: 1800
  commands:
  - func: "compile"
  - func: "run tests"
    vars:
      test_filter: StorageTests

- name: benchmark-common-tasks
  exec_timeout_secs: 1800
  tags: [ "benchmark" ]
  commands:
  - func: "run benchmark"
    vars:
      benchmark_name: common-tasks

- name: benchmark-crud
  exec_timeout_secs: 1800
  tags: [ "benchmark" ]
  commands:
  - func: "run benchmark"
    vars:
      benchmark_name: crud

- name: sync-tests
  tags: [ "test_suite", "for_pull_requests" ]
  exec_timeout_secs: 1800
  commands:
  - func: "compile"
  - func: "run tests"
    vars:
      test_filter: SyncTests

- name: object-store-tests
  tags: [ "test_suite", "for_pull_requests" ]
  exec_timeout_secs: 1800
  commands:
  - func: "compile"
  # If we need to start a local copy of baas, do it in the background here in a separate script.
  # Evergreen should take care of the lifetime of the processes we start here automatically.
  - command: shell.exec
    params:
      working_dir: realm-core
      shell: bash
      background: true
      script: |-
        set -o errexit
        set -o pipefail

        export CURL=${curl|curl}

        if [[ -n "${run_tests_against_baas|}" ]]; then
            if [[ -z "${baas_secrets_aws_access_key|}" || -z "${baas_secrets_aws_secret_key|}" ]]; then
                echo "Must supply baas secrets AWS key info to start baas server"
                exit 1
            fi

            export AWS_ACCESS_KEY_ID="${baas_secrets_aws_access_key}"
            export AWS_SECRET_ACCESS_KEY="${baas_secrets_aws_secret_key}"

            if [ -n "${xcode_developer_dir}" ]; then
                export DEVELOPER_DIR="${xcode_developer_dir}"
            fi

            ./evergreen/install_baas.sh -w ./baas-work-dir
        fi

  - command: shell.exec
    params:
      working_dir: realm-core
      shell: bash
      script: |-
        set -o errexit
        set -o pipefail

        export CURL=${curl|curl}

        if [[ -n "${run_tests_against_baas|}" ]]; then
            # wait for baas to start in the background script started above.
            ./evergreen/wait_for_baas.sh ./baas-work-dir/stitch_server.pid

            WAIT_FOR_BAAS_READY_COUNTER=0
            until [[ -f ./baas-work-dir/baas_ready ]]; do
                WAIT_FOR_BAAS_READY_COUNTER=$(($WAIT_FOR_BAAS_READY_COUNTER + 1))
                if [[ "$WAIT_FOR_BAAS_READY_COUNTER" = 12 ]]; then
                    echo "Timed out waiting for baas to finish starting and import the test app"
                    exit 1
                fi
                sleep 5
            done
        fi
  - func: "run tests"
    vars:
      test_filter: ObjectStoreTests

- name: lint
  tags: [ "for_pull_requests" ]
  commands:
  - func: "fetch source"
  - func: "fetch binaries"
  - command: shell.exec
    params:
      working_dir: realm-core
      shell: bash
      script: |-
        set -o verbose
        set -o errexit

        export PATH=$(./evergreen/abspath.sh ./clang_binaries/bin):$PATH

        if [[ "${is_patch}" == "true" ]]; then
            format_ref="$(git merge-base origin/${branch_name} HEAD)"
        else
            format_ref="${revision}"
        fi

        readonly out=$(git clang-format -v --diff $format_ref)

        if [[ "$out" == *"no modified files to format"* ]]; then
            exit 0
        fi
        if [[ "$out" == *"clang-format did not modify any files"* ]]; then
            exit 0
        fi

        echo "ERROR: you need to run git clang-format on your commit"
        echo $out
        exit 1

task_groups:
- name: compile_test_and_package
  max_hosts: 1
  setup_group_can_fail_task: true
  setup_group:
  - func: "fetch source"
  - func: "fetch binaries"
  teardown_task:
  - func: "upload test results"
  timeout:
  - func: "run hang analyzer"
  tasks:
  - compile
  - .test_suite
  - package

- name: compile_test
  max_hosts: 1
  setup_group_can_fail_task: true
  setup_group:
  - func: "fetch source"
  - func: "fetch binaries"
  teardown_task:
  - func: "upload test results"
  timeout:
  - func: "run hang analyzer"
  tasks:
  - compile
  - .test_suite

- name: compile_core_tests
  max_hosts: 1
  setup_group_can_fail_task: true
  setup_group:
  - func: "fetch source"
  - func: "fetch binaries"
  teardown_task:
  - func: "upload test results"
  timeout:
  - func: "run hang analyzer"
  tasks:
  - compile
  - core-tests

- name: benchmarks
  setup_group_can_fail_task: true
  setup_group:
  - func: "fetch source"
  - func: "fetch binaries"
  - func: "compile"
    vars:
      target_to_build: "benchmarks"
  timeout:
  - func: "run hang analyzer"
  tasks:
  - .benchmark

- name: long-running-tests
  setup_group_can_fail_task: true
  setup_group:
  - func: "fetch source"
  - func: "fetch binaries"
  - func: "compile"
    vars:
      long_running_test_duration: 2
      target_to_build: CoreTests
  teardown_task:
  - func: "upload test results"
  timeout:
  - func: "run hang analyzer"
  tasks:
  - long-running-core-tests

buildvariants:
- name: ubuntu2004
  display_name: "Ubuntu 20.04 x86_64 (Clang 11)"
  run_on: ubuntu2004-small
  expansions:
    clang_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/clang%2Bllvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    fetch_missing_dependencies: On
    run_tests_against_baas: On
    c_compiler: "./clang_binaries/bin/clang"
    cxx_compiler: "./clang_binaries/bin/clang++"
  tasks:
  - name: lint
  - name: compile_test
    distros:
    - ubuntu2004-large

- name: ubuntu2004-encryption-tsan
  display_name: "Ubuntu 20.04 x86_64 (Clang 11 Encryption Enabled w/TSAN)"
  run_on: ubuntu2004-small
  expansions:
    clang_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/clang%2Bllvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    fetch_missing_dependencies: On
    run_tests_against_baas: On
    c_compiler: "./clang_binaries/bin/clang"
    cxx_compiler: "./clang_binaries/bin/clang++"
    run_with_encryption: On
    enable_tsan: On
  tasks:
  - name: compile_core_tests
    distros:
    - ubuntu2004-large

- name: ubuntu2004-encryption-asan
  display_name: "Ubuntu 20.04 x86_64 (Clang 11 Encryption Enabled w/ASAN)"
  run_on: ubuntu2004-small
  expansions:
    clang_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/clang%2Bllvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    fetch_missing_dependencies: On
    run_tests_against_baas: On
    c_compiler: "./clang_binaries/bin/clang"
    cxx_compiler: "./clang_binaries/bin/clang++"
    run_with_encryption: On
    enable_asan: On
  tasks:
  - name: compile_core_tests
    distros:
    - ubuntu2004-large

- name: ubuntu2004-release
  display_name: "Ubuntu 20.04 x86_64 (Clang 11 Release build)"
  run_on: ubuntu2004-small
  expansions:
    clang_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/clang%2Bllvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    bloaty_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/bloaty-v1.1-39-gefc1c61-ubuntu2004-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    cmake_build_type: RelWithDebInfo
    fetch_missing_dependencies: On
    run_tests_against_baas: On
    c_compiler: "./clang_binaries/bin/clang"
    cxx_compiler: "./clang_binaries/bin/clang++"
    python3: /opt/mongodbtoolchain/v3/bin/python3
  tasks:
  - name: compile_test_and_package
    distros:
    - ubuntu2004-large
  - name: benchmarks
    distros:
    - ubuntu2004-large
  - name: long-running-tests
  - name: bloaty

- name: ubuntu2004-asan
  display_name: "Ubuntu 20.04 x86_64 (Clang 11 ASAN)"
  run_on: ubuntu2004-small
  expansions:
    clang_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/clang%2Bllvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    fetch_missing_dependencies: On
    run_tests_against_baas: On
    enable_asan: On
    c_compiler: "./clang_binaries/bin/clang"
    cxx_compiler: "./clang_binaries/bin/clang++"
  tasks:
  - name: compile_test
    distros:
    - ubuntu2004-large
  - name: long-running-tests

- name: ubuntu2004-tsan
  display_name: "Ubuntu 20.04 x86_64 (Clang 11 TSAN)"
  run_on: ubuntu2004-small
  expansions:
    clang_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/clang%2Bllvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    fetch_missing_dependencies: On
    run_tests_against_baas: On
    enable_tsan: On
    c_compiler: "./clang_binaries/bin/clang"
    cxx_compiler: "./clang_binaries/bin/clang++"
  tasks:
  - name: compile_test
    distros:
    - ubuntu2004-large

- name: rhel70
  display_name: "RHEL 7 x86_64"
  run_on: rhel70-small
  expansions:
    c_compiler: /opt/mongodbtoolchain/v3/bin/gcc
    cxx_compiler: /opt/mongodbtoolchain/v3/bin/g++
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-x86_64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    fetch_missing_dependencies: On
    curl: "/opt/mongodbtoolchain/v3/bin/curl"
    run_tests_against_baas: On
    python3: "/opt/mongodbtoolchain/v3/bin/python3"
    ninja: "/opt/mongodbtoolchain/v4/bin/ninja"
  tasks:
  - name: compile_test_and_package
    distros:
    - rhel70-large

- name: ubuntu2004-arm64
  display_name: "Ubuntu 20.04 ARM64"
  run_on: ubuntu2004-arm64-small
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-linux-aarch64.tar.gz"
    cmake_bindir: "./cmake_binaries/bin"
    python3: "/opt/mongodbtoolchain/v3/bin/python3"
    use_system_openssl: On
    fetch_missing_dependencies: On
  tasks:
  - name: compile_test_and_package
    distros:
    - ubuntu2004-arm64-large
  - name: benchmarks
    distros:
    - ubuntu2004-arm64-large

- name: macos
  display_name: "MacOS 11.0 x86_64"
  run_on: macos-1100
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-macos-universal.tar.gz"
    cmake_bindir: "./cmake_binaries/CMake.app/Contents/bin"
    cmake_toolchain_file: "./tools/cmake/xcode.toolchain.cmake"
    cmake_generator: Xcode
    max_jobs: $(sysctl -n hw.logicalcpu)
    run_tests_against_baas: On
    xcode_developer_dir: /Applications/Xcode12.4.app/Contents/Developer
    extra_flags: -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=x86_64
  tasks:
  - name: compile_test
  - name: swift-build-and-test

- name: macos-encrypted
  display_name: "MacOS 11.0 x86_64 (Encryption enabled)"
  run_on: macos-1100
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-macos-universal.tar.gz"
    cmake_bindir: "./cmake_binaries/CMake.app/Contents/bin"
    cmake_toolchain_file: "./tools/cmake/xcode.toolchain.cmake"
    cmake_generator: Xcode
    max_jobs: $(sysctl -n hw.logicalcpu)
    run_tests_against_baas: On
    xcode_developer_dir: /Applications/Xcode12.4.app/Contents/Developer
    extra_flags: -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=x86_64
    run_with_encryption: On
  tasks:
  - name: compile_core_tests

- name: macos-release
  display_name: "MacOS 11.0 x86_64 (Release build)"
  run_on: macos-1100
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-macos-universal.tar.gz"
    cmake_bindir: "./cmake_binaries/CMake.app/Contents/bin"
    cmake_toolchain_file: "./tools/cmake/xcode.toolchain.cmake"
    cmake_generator: Xcode
    max_jobs: $(sysctl -n hw.logicalcpu)
    run_tests_against_baas: On
    cmake_build_type: Release
    xcode_developer_dir: /Applications/Xcode12.4.app/Contents/Developer
    extra_flags: -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=x86_64
  tasks:
  - name: compile_test_and_package
  - name: benchmarks
  - name: long-running-tests
  - name: swift-build-and-test

- name: macos-1100-arm64
  display_name: "MacOS 11 arm64"
  run_on: macos-1100-arm64
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-macos-universal.tar.gz"
    cmake_bindir: "./cmake_binaries/CMake.app/Contents/bin"
    cmake_toolchain_file: "./tools/cmake/xcode.toolchain.cmake"
    cmake_generator: Xcode
    max_jobs: $(sysctl -n hw.logicalcpu)
    run_tests_against_baas: On
    xcode_developer_dir: /Applications/Xcode12.4.app/Contents/Developer
    extra_flags: -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=arm64
  tasks:
  - name: compile_test
    distros:
    - macos-1100-arm64
  - name: swift-build-and-test

- name: macos-1100-arm64-release
  display_name: "MacOS 11 arm64 (Release build)"
  run_on: macos-1100-arm64
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-macos-universal.tar.gz"
    cmake_bindir: "./cmake_binaries/CMake.app/Contents/bin"
    cmake_toolchain_file: "./tools/cmake/xcode.toolchain.cmake"
    cmake_generator: Xcode
    max_jobs: $(sysctl -n hw.logicalcpu)
    cmake_build_type: Release
    run_tests_against_baas: On
    xcode_developer_dir: /Applications/Xcode12.4.app/Contents/Developer
    extra_flags: -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=arm64
  tasks:
  - name: compile_test_and_package
  - name: benchmarks
  - name: long-running-tests
  - name: swift-build-and-test

- name: windows-64-vs2019
  display_name: "Windows x86_64 (VS 2019)"
  run_on: windows-64-vs2019-test
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-windows-x86_64.zip"
    cmake_bindir: "./cmake-3.20.3-windows-x86_64/bin"
    cmake_generator: "Visual Studio 16 2019"
    extra_flags: "-A x64"
    max_jobs: $(($(grep -c proc /proc/cpuinfo) / 2))
    fetch_missing_dependencies: On
    build_zlib: On
    python3: "/cygdrive/c/python/python37/python.exe"
  tasks:
  - name: compile_test_and_package
    distros:
    - windows-64-vs2019-large
  - name: long-running-tests

- name: windows-64-vs2019-release
  display_name: "Windows x86_64 (VS 2019 Release build)"
  run_on: windows-64-vs2019-test
  expansions:
    cmake_url: "https://s3.amazonaws.com/static.realm.io/evergreen-assets/cmake-3.20.3-windows-x86_64.zip"
    cmake_bindir: "./cmake-3.20.3-windows-x86_64/bin"
    cmake_generator: "Visual Studio 16 2019"
    extra_flags: "-A x64"
    cmake_build_type: "Release"
    max_jobs: $(($(grep -c proc /proc/cpuinfo) / 2))
    fetch_missing_dependencies: On
    build_zlib: On
    python3: "/cygdrive/c/python/python37/python.exe"
  tasks:
  - name: compile_test
    distros:
    - windows-64-vs2019-large
